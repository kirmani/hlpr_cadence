<?xml version="1.0"?>
<launch>

    <arg name="limited" default="false"/>
    <arg name="paused" default="false"/>
    <arg name="gui" default="true"/>
    <arg name="world" default="worlds/empty.world" />
    <arg name="room" default="$(find simulation)/launch/kitchen_scene.launch" />
    <arg name="robot_description" default="$(find vector_description)/launch/vector_upload.launch"/>
    <!-- moveit and arm specific. See vector_controller.launch for details -->
    <arg name="moveit_launch" default="false" />
    <arg name="wpi_jaco_launch" default="true" />
    <arg name="use_wpi_jaco_exec" default="true" />
    <arg name="robot_spawn_loc" default="-x -1.4 -y 3.15 -z 0.00" />


    <!-- startup simulated world -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" default="$(arg world)"/>
        <arg name="paused" value="$(arg paused)"/>
        <arg name="gui" value="$(arg gui)"/>
    </include>

    <!-- simple world -->
    <include file="$(arg room)"/>

    <!-- send robot urdf to param server -->
    <include file="$(arg robot_description)"/>

    <!-- push robot_description to factory and spawn robot in gazebo -->
    <node name="spawn_gazebo_model" pkg="gazebo_ros" type="spawn_model" args="-urdf -param robot_description -model robot $(arg robot_spawn_loc)" respawn="false" output="screen" />

    <!-- Bring up robot controllers -->   
    <include file="$(find hlpr_gazebo)/launch/vector_controllers.launch" >
        <arg name="moveit_launch" value="$(arg moveit_launch)" />
        <arg name="wpi_jaco_launch" value="$(arg wpi_jaco_launch)" />
        <arg name="use_wpi_jaco_exec" value="$(arg use_wpi_jaco_exec)" />
    </include>

    <!-- Setup all of the TFs, states, etc. --> 
    <include file="$(find hlpr_gazebo)/launch/state_publishers.launch"/>

    <!-- Bring up odometry and teleop nodes -->
    <include file="$(find vector_bringup)/launch/localization/vector_odometry.launch"/>
    <include file="$(find vector_bringup)/launch/teleop/vector_teleop.launch">
        <arg name="sim" value="true"/>
    </include>

    <!-- Custom laser launch scripts -->
    <group if="$(optenv VECTOR_HAS_SECOND_2D_LASER false)">
        <node pkg="ira_laser_tools" name="laserscan_multi_merger" type="laserscan_multi_merger" output="screen">
            <param name="destination_frame" value="base_link"/>
            <param name="cloud_destination_topic" value="/vector/merged_cloud"/>
            <param name="scan_destination_topic" value="/vector/scan_multi"/>
            <param name="laserscan_topics" value ="/vector/$(optenv LASER1_PREFIX front)_scan /vector/$(optenv LASER2_PREFIX rear)_scan"/>
        </node>
        <node pkg="laser_filters" type="scan_to_scan_filter_chain" name="vector_laser_filter" clear_params="true" respawn="true">
            <remap from="scan" to="/vector/scan_multi" />
            <remap from="scan_filtered" to="/vector/base_scan_filtered" />
            <param name="target_frame" value="base_link" />
            <param name="high_fidelity" value="true" />
            <rosparam command="load" 
                file="$(find vector_bringup)/launch/sensors/config/laser_scan_filter.yaml" />
        </node>
     </group>
    
        <group if="$(optenv VECTOR_HAS_ONE_2D_LASER false)">
        <node pkg="topic_tools" type="relay" name="vector_laser_filter" args="/vector/$(optenv LASER1_PREFIX front)_scan /vector/base_scan_filtered" unless="$(optenv VECTOR_HAS_SECOND_2D_LASER false)"/>
    </group>

   <!-- Speech Recognition! Param for if we are launching mic vs. fake speech input -->
   <arg name="speech_gui" default="true" />
   <arg name="speech_config_file" default="$(find hlpr_speech_recognition)/config/speech.yaml" />

   <!-- Params for real input with microphone -->
   <arg name="dict_path" default="$(find hlpr_speech_recognition)/data/kps.dic" />
   <arg name="kps_path" default="$(find hlpr_speech_recognition)/data/kps.txt" />

   <!-- Params for the speech listener - used for real or fake speech -->
   <!-- Example of how to have multiple yaml files -->
   <!-- WARNING: currently if there are duplicate keys, the 2nd file will overwrite the first -->
   <!--arg name="yaml_list" default="$(find hlpr_speech_recognition)/data/kps.yaml, $(find hlpr_speech_recognition)/data/kps.yaml" /-->
   <arg name="yaml_list" default="$(find hlpr_speech_recognition)/data/kps.yaml" />

   <!-- Load parameters for speech -->
   <rosparam command="load" file="$(arg speech_config_file)" />

    <!-- Start the speech_listener node recording action server -->
    <include file="$(find hlpr_speech_recognition)/launch/speech_listener.launch">
         <arg name="config_file" value="$(arg speech_config_file)"/>
         <arg name="yaml_list" value="$(arg yaml_list)"/>
    </include>

    <!-- Start the GUI if speech_gui set to true -->
    <node name="speech_gui" pkg="hlpr_speech_recognition" type="speech_gui" respawn="false" output="screen" if="$(arg speech_gui)"/>

    <!-- Start the hlpr_speech_recognizer 
     Note: just an example of how to launch with params 
           like the gui, but not tested with mic input! -->
    <node name="speech_recognizer" pkg="hlpr_speech_recognition" type="speech_recognizer" respawn="false" output="screen" unless="$(arg speech_gui)">
         <param name="dict_path" value="$(arg dict_path)" />
         <param name="kps_path" value="$(arg kps_path)" />
    </node>


    <!-- moveit -->
    <arg name="sim" default="true" />

    <group if="$(arg wpi_jaco_launch)">
        <!-- Load the wpi_jaco_wrapper launch file --> 
        <include file="$(find wpi_jaco_wrapper)/launch/arm.launch">
            <arg name="sim" value="$(arg sim)" />
        </include>

        <group if="$(optenv VECTOR_HAS_TWO_KINOVA_ARMS false)">
            <!-- Load the wpi_jaco_wrapper launch file for the second arm --> 
            <include ns="left_arm" file="$(find wpi_jaco_wrapper)/launch/two_arms.launch">
                <arg name="sim" value="$(arg sim)" />
                <arg name="side" value="left" />
            </include>
        </group>
    </group>

    <!-- Run the main MoveIt executable with trajectory execution -->  
    <include file="$(find hlpr_wpi_jaco_moveit_config)/launch/move_group.launch" unless="$(optenv VECTOR_HAS_TWO_KINOVA_ARMS false)">
        <arg name="allow_trajectory_execution" value="$(arg use_wpi_jaco_exec)"/>
        <arg name="fake_execution" value="false"/>
        <arg name="info" value="true"/>
        <arg name="debug" value="false"/>
    </include>

    <include file="$(find hlpr_wpi_jaco_moveit_config_two_arms)/launch/move_group.launch" if="$(optenv VECTOR_HAS_TWO_KINOVA_ARMS false)">
        <arg name="allow_trajectory_execution" value="$(arg use_wpi_jaco_exec)"/>
        <arg name="fake_execution" value="false"/>
        <arg name="info" value="true"/>
        <arg name="debug" value="false"/>
    </include>

  <!-- Run the feature extraction code-->  
  <arg name="segmentation/nv" default="true" />
  <arg name="segmentation/rt" default="/kinect/sd/points" />
  <arg name="segmentation/src" default="0" />
  <arg name="segmentation/c" default="0" />
  <arg name="segmentation/ct" default="100000000" />

  <node pkg="hlpr_segmentation" type="pc_seg" name="pc_seg" >
    <param name="segmentation/nv" value="$(arg segmentation/nv)" />
    <param name="segmentation/rt" value="$(arg segmentation/rt)" />
    <param name="segmentation/src" value="$(arg segmentation/src)" />
    <param name="segmentation/c" value="$(arg segmentation/c)" />
    <param name="segmentation/ct" value="$(arg segmentation/ct)" />
  </node>

  <arg name="feature_extraction/nv" default="true" />
  <node pkg="hlpr_feature_extraction" type="ft_ex" name="ft_ex" output="screen">
    <param name="feature_extraction/nv" value="$(arg feature_extraction/nv)" />
  </node>

</launch>
